{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["firebase","apps","length","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","localStream","remoteStream","firestore","pc","RTCPeerConnection","iceServers","urls","iceCandidatePoolSize","App","webcamButton","document","getElementById","webcamVideo","callButton","callInput","answerButton","remoteVideo","useState","callId","setCallId","onClickWebcamButton","a","navigator","mediaDevices","getUserMedia","video","audio","MediaStream","getTracks","forEach","track","addTrack","ontrack","event","streams","srcObject","disabled","onClickCallButton","callDoc","collection","doc","offerCandidates","answerCandidates","getTemp","id","onicecandidate","candidate","add","toJSON","value","createOffer","offerDescription","setLocalDescription","offer","sdp","type","set","onSnapshot","snapshot","data","currentRemoteDescription","answer","answerDescription","RTCSessionDescription","setRemoteDescription","docChanges","change","RTCIceCandidate","addIceCandidate","onClickAnswerButton","get","callData","createAnswer","update","console","log","useEffect","className","autoPlay","playsInline","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.aa993bfc.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState, useEffect, useRef } from 'react'\nimport './App.css';\nimport logo from './logo.svg';\nimport firebase from 'firebase/app'\nimport 'firebase/firestore'\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDpLbGo4YhYPfVE5iY49lDhN88Tx3LUvs8\",\n  authDomain: \"react-web-rtc.firebaseapp.com\",\n  databaseURL: \"https://react-web-rtc-default-rtdb.asia-southeast1.firebasedatabase.app\",\n  projectId: \"react-web-rtc\",\n  storageBucket: \"react-web-rtc.appspot.com\",\n  messagingSenderId: \"340688411698\",\n  appId: \"1:340688411698:web:25e56d0a6d38412084702b\",\n  measurementId: \"G-W5LNPQ6KHN\"\n}\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(firebaseConfig);\n}\nconst firestore = firebase.firestore();\n\nconst servers = {\n  iceServers: [\n    {\n      urls: ['stun:stun1.l.google.com:19302', 'stun:stun2.l.google.com:19302'],\n    },\n  ],\n  iceCandidatePoolSize: 10,\n}\n\n// Global State\nlet pc = new RTCPeerConnection(servers); // 이 object 는 where all the actions happen\nlet localStream;\nlet remoteStream;\n\nfunction App() {\n  // const localStream = useRef(null)\n  let webcamButton = document.getElementById('webcamButton');\n  let webcamVideo = document.getElementById('webcamVideo');\n  let callButton = document.getElementById('callButton');\n  let callInput = document.getElementById('callInput');\n  let answerButton = document.getElementById('answerButton');\n  let remoteVideo = document.getElementById('remoteVideo');\n  let hangupButton = document.getElementById('hangupButton');\n\n  // const remoteStream = useRef(null)\n\n  const [callId, setCallId] = useState('')\n  // 1. 미디어 소스 셋업\n  const onClickWebcamButton = async () => {\n    localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true })\n    remoteStream = new MediaStream()\n    // Push tracks from local stream to peer connection\n    localStream.getTracks().forEach((track) => {\n      pc.addTrack(track, localStream);\n    });\n\n\n\n    // Pull tracks from remote stream, add to video stream\n    pc.ontrack = (event) => {\n      event.streams[0].getTracks().forEach((track) => {\n        remoteStream.addTrack(track);\n      });\n    };\n\n    webcamVideo.srcObject = localStream;\n    remoteVideo.srcObject = remoteStream;\n\n    callButton.disabled = false;\n    answerButton.disabled = false;\n    webcamButton.disabled = true;\n  }\n\n  // 2. offer 만들기\n  const onClickCallButton = async () => {\n    // Reference Firestore collections for signaling\n    const callDoc = firestore.collection('calls').doc()\n    let offerCandidates = callDoc.collection('offerCandidates')\n    let answerCandidates = callDoc.collection('answerCandidates')\n\n    const getTemp = () => {\n      offerCandidates = callDoc.collection('offerCandidates')\n      answerCandidates = callDoc.collection('answerCandidates')\n      setCallId(callDoc.id)\n    }\n\n    pc.onicecandidate = async (event) => {\n      await getTemp()\n      event.candidate && offerCandidates.add(event.candidate.toJSON())\n\n    };\n\n    callInput.value = callId\n\n    // Get candidates for caller, save to db\n    await pc.onicecandidate(offerCandidates)\n\n    // Create offer\n    const offerDescription = await pc.createOffer();\n    await pc.setLocalDescription(offerDescription);\n\n    const offer = {\n      sdp: offerDescription.sdp,\n      type: offerDescription.type,\n    }\n\n    await callDoc.set({ offer })\n\n    // Listen for remote answer\n    callDoc.onSnapshot((snapshot) => {\n      const data = snapshot.data()\n      if (!pc.currentRemoteDescription && data?.answer) {\n        const answerDescription = new RTCSessionDescription(data.answer)\n        pc.setRemoteDescription(answerDescription)\n      }\n    })\n\n    // When answered, add candidate to peer connection\n    answerCandidates.onSnapshot((snapshot) => {\n      snapshot.docChanges().forEach((change) => {\n        if (change.type === 'added') {\n          const candidate = new RTCIceCandidate(change.doc.data())\n          pc.addIceCandidate(candidate)\n        }\n      })\n    })\n\n  }\n\n  // 3. Answer the call with the unique ID\n  const onClickAnswerButton = async () => {\n    const callDoc = firestore.collection('calls').doc(callInput.value)\n    const answerCandidates = callDoc.collection('answerCandidates')\n    const offerCandidates = callDoc.collection('offerCandidates')\n\n    pc.onicecandidate = (event) => {\n      event.candidate && answerCandidates.add(event.candidate.toJSON());\n    }\n\n    const callData = (await callDoc.get()).data()\n\n    const offerDescription = callData.offer\n    await pc.setRemoteDescription(new RTCSessionDescription(offerDescription))\n\n    const answerDescription = await pc.createAnswer()\n    await pc.setLocalDescription(answerDescription)\n\n    const answer = {\n      type: answerDescription.type,\n      sdp: answerDescription.sdp,\n    }\n\n    await callDoc.update({ answer });\n\n    offerCandidates.onSnapshot((snapshot) => {\n      snapshot.docChanges().forEach((change) => {\n        console.log(change)\n        if (change.type === 'added') {\n          let data = change.doc.data()\n          pc.addIceCandidate(new RTCIceCandidate(data));\n        }\n      })\n    })\n  }\n\n  const getElementsWhenRendered = () => {\n    webcamButton = document.getElementById('webcamButton');\n    webcamVideo = document.getElementById('webcamVideo');\n    callButton = document.getElementById('callButton');\n    callInput = document.getElementById('callInput');\n    answerButton = document.getElementById('answerButton');\n    remoteVideo = document.getElementById('remoteVideo');\n    hangupButton = document.getElementById('hangupButton');\n  }\n\n  useEffect(() => {\n    getElementsWhenRendered()\n  })\n\n  return (\n    <div className=\"App\">\n      <h2>1. Start your Webcam</h2>\n\n      <div className=\"videos\">\n        <span>\n          <h3>Local Stream</h3>\n          <video id=\"webcamVideo\" autoPlay playsInline></video>\n        </span>\n        <span>\n          <h3>Remote Stream</h3>\n          <video id=\"remoteVideo\" autoPlay playsInline></video>\n        </span>\n      </div>\n\n      <button id=\"webcamButton\" onClick={onClickWebcamButton}>Start webcam</button>\n      <h2>2. Create a new Call</h2>\n      <button id=\"callButton\" onClick={onClickCallButton}>Create Call (offer)</button>\n\n      <h2>3. Join a Call</h2>\n      <p>Answer the call from a different browser window or device</p>\n\n      <input id=\"callInput\"></input>\n      <button id=\"answerButton\" onClick={onClickAnswerButton}>Answer</button>\n\n      <h2>4. Hangup</h2>\n\n      <button id=\"hangupButton\">Hangup</button>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}